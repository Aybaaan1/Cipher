<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ciphers</title>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron&display=swap" rel="stylesheet">
  <style>
   body {
      margin: 0;
      padding: 0;
      font-family: 'Orbitron', sans-serif;
      background: #0d0f20;
      color: #eee;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden;
      position: relative;
    }

   
    .game-container {
      width: 65%;
      height: 50%;
      max-width: 1200px;
      background-image: url('https://4kwallpapers.com/images/walls/thumbs_2t/10307.jpg');
      border-radius: 12px;
      border: 2px solid #00ff00;
      box-shadow: 0 0 30px rgba(0, 255, 0, 0.5);
      text-align: center;
      padding: 40px;
      position: relative;
      overflow: hidden;
      animation: fadeIn 1s ease-in-out;
      z-index: 1; /* Higher z-index to ensure buttons are above the rocket */
    }
    @keyframes fadeIn {
      0% { opacity: 0; transform: translateY(-20px); }
      100% { opacity: 1; transform: translateY(0); }
    }

    .game-title {
      font-size: 4em;
      color: #00ff00;
      text-shadow: 0 0 15px #00ff00, 0 0 30px #00ff00;
      margin-bottom: 30px;
      animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
      0%, 100% { text-shadow: 0 0 15px #00ff00, 0 0 30px #00ff00; }
      50% { text-shadow: 0 0 30px #00ff00, 0 0 50px #00ff00; }
    }

    .button-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  z-index: 2; /* Ensures buttons are on top of the rocket */
}

    button {
      padding: 15px 25px;
      font-size: 1.4em;
      border: none;
      border-radius: 8px;
      background: linear-gradient(145deg, #1a1a1a, #2e2e2e);
      color: #00ff00;
      box-shadow: inset 0 0 5px rgba(0, 255, 0, 0.4), 0 0 15px rgba(0, 255, 0, 0.8);
      cursor: pointer;
      outline: none;
      transition: all 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
      position: relative;
      overflow: hidden;
      transform-origin: center;
    }

    button::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: rgba(0, 255, 0, 0.3);
      transform: translate(-50%, -50%);
      transition: all 0.3s ease-in-out;
      z-index: -1;
    }

    button:hover::before {
      width: 300%;
      height: 300%;
    }

    button:hover {
      transform: scale(1.1) rotate(2deg);
      box-shadow: inset 0 0 10px rgba(0, 255, 0, 0.6), 0 0 25px rgba(0, 255, 0, 1);
    }

    button:active {
      background: linear-gradient(145deg, #2e2e2e, #1a1a1a);
      box-shadow: inset 0 0 15px rgba(0, 255, 0, 0.8);
      transform: scale(1) rotate(0deg);
    }

    .animated-background {
      background: radial-gradient(circle, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 1));
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0.2;
      z-index: -2;
      animation: shimmer 2s infinite linear;
    }

    @keyframes shimmer {
      0% {
        background: radial-gradient(circle, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 1));
      }
      50% {
        background: radial-gradient(circle, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0.8));
      }
      100% {
        background: radial-gradient(circle, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 1));
      }
    }

    .particles {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      pointer-events: none;
    }

   .particle {
  width: 8px;
  height: 8px;
  background-color: #00ff00;
  border-radius: 50%;
  position: absolute;
  pointer-events: none;
  animation: bounce 6s ease-in-out infinite, move 4s linear infinite;
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-20px);
  }
}

   .rocket {
  position: absolute;
  top: 20%;
  left: -10%;
  width: 50px;
  animation: fly 10s ease-in-out infinite, move 4s linear infinite;
  z-index: 0; /* Lower z-index to place behind other elements */
}


.rocket::after {
  content: '';
  display: block;
  width: 5px;
  height: 20px;
  background: linear-gradient(180deg, #f39c12, #e74c3c);
  border-radius: 50px;
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  animation: flame 4s linear infinite;
}


@keyframes fadeIn {
  0% { opacity: 0; transform: translateY(-20px); }
  100% { opacity: 1; transform: translateY(0); }
}

@keyframes fly {
  0% {
    top: 20%;
    left: -10%;
    transform: rotate(0deg);
  }
  50% {
    top: 50%;
    left: 50%;
    transform: rotate(10deg);
  }
  100% {
    top: 80%;
    left: 110%;
    transform: rotate(0deg);
  }
}

@keyframes flame {
  0% {
    height: 20px;
    opacity: 1;
  }
  50% {
    height: 30px;
    opacity: 0.6;
  }
  100% {
    height: 20px;
    opacity: 1;
  }
  }
     .info-button {
      position: absolute;
      top: 20px; /* Adjust position as needed */
      right: 20px; /* Adjust position as needed */
      width: 30px;
      height: 30px;
      background-color: #00ff00;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.8);
      z-index: 2;
    }

   .info-button::before {
  content: '?';
  color: #000;
  font-size: 1.5em; /* Adjust size as needed */
  font-weight: bold;
  display: block; /* Ensures it's only shown when the button is visible */
}

 

 .modal-content {
  background: #1a1a1a;
  padding: 30px;
  border-radius: 10px;
  width: 50%;
  text-align: center;
  box-shadow: 0 0 20px rgba(0, 255, 0, 0.8);
  color: #eee;
}

    .modal-content h2 {
      margin-bottom: 20px;
    }

    .modal-content p {
      margin-bottom: 20px;
    }

    .close-button {
      background: #f44336;
      border: none;
      color: white;
      padding: 10px 15px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1.2em;
    }

    .close-button:hover {
      background: #d32f2f;
    }
#infoModal{
position: absolute;
      width: 90%;
      right: -15%;
      z-index: 3;
}
.modal {
  display: none; /* Keeps the modal hidden initially */
  position: fixed;
  top: 50%;
  left: 70%;
  transform: translate(-50%, -50%);
  z-index: 3;
}
  </style>
</head>
<body>
  <div class="game-container">
    <h1 class="game-title">Ciphers Game</h1>
    <div class="button-container">
      <button onclick="window.location.href='/caesar'">Caesar Cipher</button>
      <button onclick="window.location.href='/vigenere'">Vigen√®re Cipher</button>
      <button onclick="window.location.href='/playfair'">Playfair Cipher</button>
      <button onclick="window.location.href='/scolumnar'">Single Columnar</button>
      <button onclick="window.location.href='/dcolumnar'">Double Columnar</button>
      <button onclick="window.location.href='/aes'">AES Encryption</button>
    </div>
    <div class="animated-background"></div>
    <div class="particles">
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
    </div>
    <img src="https://www.freeiconspng.com/thumbs/rocket-png/rocket-icon-png-21.png" class="rocket" alt="Rocket">
    <!-- Place the info button inside the container -->
    <div class="info-button" onclick="toggleModal()"></div>
  </div>

  <!-- Modal -->
  <div class="modal" id="infoModal">
    <div class="modal-content">
      <h2>About Ciphers</h2>
      <p>This is a game for learning and practicing various types of ciphers.</p>
      <button class="close-button" onclick="toggleModal()">Close</button>
    </div>
  </div>

  <script>
    
    function toggleModal() {
      const modal = document.getElementById('infoModal');
      modal.style.display = (modal.style.display === 'block') ? 'none' : 'block';
    }
    
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const particlesContainer = document.querySelector('.particles');
      const container = document.querySelector('.game-container');
      const containerRect = container.getBoundingClientRect();

      function createParticle() {
        const particle = document.createElement('div');
        particle.classList.add('particle');

        // Set a random position within the container bounds
        particle.style.top = `${Math.random() * (containerRect.height - 8)}px`;
        particle.style.left = `${Math.random() * (containerRect.width - 8)}px`;

        // Append particle to the container
        particlesContainer.appendChild(particle);

        // Move particle within the container
        let xVelocity = (Math.random() - 3) * 3; // Random horizontal speed
        let yVelocity = (Math.random() - 3) * 3; // Random vertical speed

        function moveParticle() {
          let top = parseFloat(particle.style.top);
          let left = parseFloat(particle.style.left);

          // Check for boundary collisions and reverse direction if needed
          if (left + 8 >= containerRect.width || left <= 0) {
            xVelocity *= -1;
          }
          if (top + 8 >= containerRect.height || top <= 0) {
            yVelocity *= -1;
          }

          // Update the position
          particle.style.top = `${top + yVelocity}px`;
          particle.style.left = `${left + xVelocity}px`;

          requestAnimationFrame(moveParticle);
        }

        // Start moving the particle
        moveParticle();

        // Remove the particle after 4 seconds
        setTimeout(() => {
          particle.remove();
        }, 4000);
      }

      // Create particles at regular intervals
      setInterval(createParticle, 1000);
    });
  </script>
  
</body>
</html>
